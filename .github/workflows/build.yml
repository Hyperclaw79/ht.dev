name: Build, Lint, and Test

on:
  push:
    branches: [ main, testing ]
    paths:
      - 'svelteapp/**'
  pull_request:
    branches: [ main, testing ]

permissions:
  contents: read
  pull-requests: write

jobs:
  build_lint_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./svelteapp
    strategy:
        matrix:
            task: [build, lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install

    - name: Run build task
      if: matrix.task == 'build'
      run: npm run build

    - name: Run lint task
      if: matrix.task == 'lint'
      run: npm run lint

    - name: Run tests with coverage
      if: matrix.task == 'test'
      env:
        NODE_OPTIONS: "--experimental-vm-modules"
      run: npm test -- --coverage --coverageReporters=text --coverageReporters=lcov --coverageReporters=html --coverageReporters=json-summary

    - name: Extract coverage summary
      if: matrix.task == 'test'
      run: |
        # Create a Node.js script to generate comprehensive coverage report
        cat > generate-coverage-report.cjs << 'EOF'
        const fs = require('fs');
        
        function generateProgressBar(percentage) {
          const pct = parseFloat(percentage);
          const blocks = Math.round(pct / 5); // 20 blocks total for 100%
          const filled = '█'.repeat(blocks);
          const empty = '░'.repeat(20 - blocks);
          
          let color;
          if (pct >= 90) color = '🟢';
          else if (pct >= 75) color = '🟡';
          else color = '🔴';
          
          return `${color} ${filled}${empty} ${pct}%`;
        }
        
        function formatCoverageData(coverageData) {
          const total = coverageData.total;
          
          const table = `
        ## 📊 Test Coverage Report
        
        | Coverage Type | Progress | Covered/Total |
        |---------------|----------|---------------|
        | **Statements** | ${generateProgressBar(total.statements.pct)} | ${total.statements.covered}/${total.statements.total} |
        | **Lines** | ${generateProgressBar(total.lines.pct)} | ${total.lines.covered}/${total.lines.total} |
        | **Functions** | ${generateProgressBar(total.functions.pct)} | ${total.functions.covered}/${total.functions.total} |
        | **Branches** | ${generateProgressBar(total.branches.pct)} | ${total.branches.covered}/${total.branches.total} |
        
        ### 📈 Overall Summary
        - **Total Files Covered**: ${Object.keys(coverageData).length - 1} files
        - **Average Coverage**: ${((total.statements.pct + total.lines.pct + total.functions.pct + total.branches.pct) / 4).toFixed(2)}%
        `;
          
          return table;
        }
        
        try {
          if (fs.existsSync('coverage/coverage-summary.json')) {
            const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const report = formatCoverageData(coverageData);
            
            // Output for GitHub Environment
            console.log('COVERAGE_REPORT<<EOF');
            console.log(report);
            console.log('EOF');
            
            // Save individual metrics for backward compatibility
            const total = coverageData.total;
            console.log(`STATEMENTS_PCT=${total.statements.pct}`);
            console.log(`LINES_PCT=${total.lines.pct}`);
            console.log(`FUNCTIONS_PCT=${total.functions.pct}`);
            console.log(`BRANCHES_PCT=${total.branches.pct}`);
            console.log(`TOTAL_FILES=${Object.keys(coverageData).length - 1}`);
          } else {
            console.log('COVERAGE_REPORT=Coverage file not found');
            console.log('STATEMENTS_PCT=N/A');
            console.log('LINES_PCT=N/A');
            console.log('FUNCTIONS_PCT=N/A');
            console.log('BRANCHES_PCT=N/A');
            console.log('TOTAL_FILES=0');
          }
        } catch (error) {
          console.log('COVERAGE_REPORT=Error reading coverage data');
          console.log('STATEMENTS_PCT=Error');
          console.log('LINES_PCT=Error');
          console.log('FUNCTIONS_PCT=Error');
          console.log('BRANCHES_PCT=Error');
          console.log('TOTAL_FILES=0');
        }
        EOF
        
        # Run the script and capture output
        node generate-coverage-report.cjs >> $GITHUB_ENV

    - name: Generate coverage summary file
      if: matrix.task == 'test'
      run: |
        # Extract test statistics from Jest output and create dynamic summary
        cat > extract-test-stats.cjs << 'EOF'
        const fs = require('fs');
        
        // Generate timestamp
        const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
        
        // Read coverage data for file count
        let totalFiles = 0;
        let avgCoverage = 'N/A';
        
        if (fs.existsSync('coverage/coverage-summary.json')) {
          const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          totalFiles = Object.keys(coverageData).length - 1; // Exclude 'total' key
          const total = coverageData.total;
          avgCoverage = ((total.statements.pct + total.lines.pct + total.functions.pct + total.branches.pct) / 4).toFixed(2) + '%';
        }
        
        const summary = `# Test Coverage Report

**Generated on:** ${timestamp}

## Coverage Summary

${process.env.COVERAGE_REPORT || 'Coverage data not available'}

### 📊 Test Execution Details
- **Total Files Analyzed:** ${totalFiles}
- **Average Coverage:** ${avgCoverage}

### Key Improvements Made
- Enhanced branch coverage for low-coverage components
- Added comprehensive edge case testing
- Improved conditional logic coverage
- Optimized V8 coverage provider for accuracy

The detailed HTML coverage report is available in the coverage/ directory.
`;
        
        fs.writeFileSync('coverage-summary.md', summary);
        console.log('Dynamic coverage summary generated successfully');
        EOF
        
        node extract-test-stats.cjs

    - name: Upload coverage reports and summary
      if: matrix.task == 'test'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          svelteapp/coverage/
          svelteapp/coverage-summary.md
        retention-days: 30

    - name: Comment coverage on PR
      if: matrix.task == 'test' && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          // Use the dynamically generated coverage report
          const coverageReport = process.env.COVERAGE_REPORT || 'Coverage data not available';
          
          // Add test execution summary with dynamic data
          const testSummary = `
          ### ✅ Test Execution Summary
          - **Statement Coverage**: ${process.env.STATEMENTS_PCT || 'N/A'}%
          - **Line Coverage**: ${process.env.LINES_PCT || 'N/A'}%  
          - **Function Coverage**: ${process.env.FUNCTIONS_PCT || 'N/A'}%
          - **Branch Coverage**: ${process.env.BRANCHES_PCT || 'N/A'}%
          - **Files Analyzed**: ${process.env.TOTAL_FILES || '0'} files
          
          ### 📁 Artifact Downloads
          The detailed HTML coverage report has been uploaded as an artifact and can be downloaded from the workflow run.
          `;
          
          const comment = coverageReport + testSummary;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
